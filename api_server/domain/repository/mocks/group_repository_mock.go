// Code generated by MockGen. DO NOT EDIT.
// Source: api_server/domain/repository/group_repository.go
//
// Generated by this command:
//
//	mockgen -source=api_server/domain/repository/group_repository.go -destination=api_server/domain/repository/mocks/group_repository_mock.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "pinnacle-play/domain/model"
	reflect "reflect"

	"github.com/golang/mock/gomock"
)

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockGroupRepository) Save(ctx context.Context, name model.GroupName) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, name)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockGroupRepositoryMockRecorder) Save(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGroupRepository)(nil).Save), ctx, name)
}
