// Code generated by MockGen. DO NOT EDIT.
// Source: api_server/domain/repository/question_repository.go
//
// Generated by this command:
//
//	mockgen -source=api_server/domain/repository/question_repository.go -destination=api_server/domain/repository/mocks/question_repository_mock.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "pinnacle-play/domain/model"
	reflect "reflect"

	"github.com/golang/mock/gomock"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockQuestionRepository) Save(ctx context.Context, content string, groupId model.GroupID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, content, groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockQuestionRepositoryMockRecorder) Save(ctx, content, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockQuestionRepository)(nil).Save), ctx, content, groupId)
}
